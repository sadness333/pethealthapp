package com.example.prettypetsandfriends.ui.screens

import androidx.compose.animation.animateContentSize
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.DirectionsCar
import androidx.compose.material.icons.filled.Emergency
import androidx.compose.material.icons.filled.ExpandLess
import androidx.compose.material.icons.filled.ExpandMore
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Healing
import androidx.compose.material.icons.filled.LocalHospital
import androidx.compose.material.icons.filled.MedicalServices
import androidx.compose.material.icons.filled.Medication
import androidx.compose.material.icons.filled.Psychology
import androidx.compose.material.icons.filled.Restaurant
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.prettypetsandfriends.data.entities.FAQItem
import com.example.prettypetsandfriends.ui.components.CustomBottomNavigation
import com.example.prettypetsandfriends.ui.components.CustomTopBar

@Composable
fun FAQScreen(navController: NavController) {
    val faqItems = remember {
        mutableStateListOf(
            FAQItem(
                question = "üêæ –ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Å–µ—â–∞—Ç—å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞?",
                answer = "–ü–ª–∞–Ω–æ–≤—ã–µ –æ—Å–º–æ—Ç—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è:\n\n‚Ä¢ –í–∑—Ä–æ—Å–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: 1-2 —Ä–∞–∑–∞ –≤ –≥–æ–¥\n‚Ä¢ –©–µ–Ω–∫–∏/–∫–æ—Ç—è—Ç–∞: —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –¥–æ 6 –º–µ—Å—è—Ü–µ–≤\n‚Ä¢ –ü–æ–∂–∏–ª—ã–µ –ø–∏—Ç–æ–º—Ü—ã: –∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤\n‚Ä¢ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª—å–Ω—ã–µ: –ø–æ –≥—Ä–∞—Ñ–∏–∫—É –≤—Ä–∞—á–∞",
                icon = Icons.Default.MedicalServices
            ),
            FAQItem(
                question = "üíâ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ª–∏ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è?",
                answer = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–≤–∫–∏:\n\n‚úÖ –ë–µ—à–µ–Ω—Å—Ç–≤–æ (–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ)\n‚úÖ –ß—É–º–∫–∞ –ø–ª–æ—Ç–æ—è–¥–Ω—ã—Ö\n‚úÖ –ü–∞—Ä–≤–æ–≤–∏—Ä—É—Å–Ω—ã–π —ç–Ω—Ç–µ—Ä–∏—Ç\n‚úÖ –†–∏–Ω–æ—Ç—Ä–∞—Ö–µ–∏—Ç (–¥–ª—è –∫–æ—à–µ–∫)\n\n–ì—Ä–∞—Ñ–∏–∫: –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å –≤ 2-4 –º–µ—Å—è—Ü–∞, —Ä–µ–≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –µ–∂–µ–≥–æ–¥–Ω–æ",
                icon = Icons.Default.Healing
            ),
            FAQItem(
                question = "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
                answer = "–°—Ä–æ—á–Ω–æ –∫ –≤—Ä–∞—á—É –ø—Ä–∏:\n\n‚Ä¢ –¢—Ä–∞–≤–º–∞—Ö —Å –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ–º\n‚Ä¢ –ó–∞—Ç—Ä—É–¥–Ω—ë–Ω–Ω–æ–º –¥—ã—Ö–∞–Ω–∏–∏\n‚Ä¢ –°—É–¥–æ—Ä–æ–≥–∞—Ö\n‚Ä¢ –û—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏\n‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤—ã—à–µ 40¬∞C\n‚Ä¢ –û—Ç–∫–∞–∑–µ –æ—Ç –µ–¥—ã/–≤–æ–¥—ã –±–æ–ª–µ–µ —Å—É—Ç–æ–∫",
                icon = Icons.Default.Emergency
            ),
            FAQItem(
                question = "ü©∫ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                answer = "1. –ì–æ–ª–æ–¥–Ω–∞—è –¥–∏–µ—Ç–∞ 8-12 —á–∞—Å–æ–≤\n2. –î–æ—Å—Ç—É–ø –∫ –≤–æ–¥–µ\n3. –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n4. –ü—Ä–∏–Ω–µ—Å—Ç–∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç\n5. –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞—Ö",
                icon = Icons.Default.LocalHospital
            ),
            FAQItem(
                question = "‚ù§Ô∏è –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ö–æ–¥",
                answer = "‚Ä¢ –ü–æ–∫–æ–π 10-14 –¥–Ω–µ–π\n‚Ä¢ –ó–∞—â–∏—Ç–Ω—ã–π –≤–æ—Ä–æ—Ç–Ω–∏–∫\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–≤–æ–≤ 2 —Ä–∞–∑–∞/–¥–µ–Ω—å\n‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–ø–ø–µ—Ç–∏—Ç–∞\n‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏\n‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä —á–µ—Ä–µ–∑ 3 –¥–Ω—è",
                icon = Icons.Default.Favorite
            ),
            FAQItem(
                question = "üçé –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                answer = "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n\n‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –ª–∏–Ω–µ–π–∫–∏ –∫–æ—Ä–º–æ–≤\n‚Ä¢ –ó–∞–ø—Ä–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –µ–¥—É\n‚Ä¢ –°–≤–µ–∂–∞—è –≤–æ–¥–∞ –≤—Å–µ–≥–¥–∞\n‚Ä¢ –î–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ü–∏–π\n‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏–µ—Ç—ã –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é",
                icon = Icons.Default.Restaurant
            ),
            FAQItem(
                question = "üöó –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å –ø–∏—Ç–æ–º—Ü–µ–º",
                answer = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:\n\n1. –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç\n2. –ü–µ—Ä–µ–Ω–æ—Å–∫–∞-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä\n3. –ê–ø—Ç–µ—á–∫–∞ –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏\n4. –ó–∞–ø–∞—Å –∫–æ—Ä–º–∞\n5. –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã\n6. –ß–∏–ø—ã/–∞–¥—Ä–µ—Å–Ω–∏–∫",
                icon = Icons.Default.DirectionsCar
            ),
            FAQItem(
                question = "üê∂ –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
                answer = "–ß–∞—Å—Ç—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n\n‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è\n‚Ä¢ –°—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã\n‚Ä¢ –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n‚Ä¢ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∑–æ–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞",
                icon = Icons.Default.Psychology
            ),
            FAQItem(
                question = "üå°Ô∏è –î–æ–º–∞—à–Ω—è—è –∞–ø—Ç–µ—á–∫–∞",
                answer = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä:\n\n‚Ä¢ –ü–µ—Ä–µ–≤—è–∑–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n‚Ä¢ –ê–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫–∏ (—Ö–ª–æ—Ä–≥–µ–∫—Å–∏–¥–∏–Ω)\n‚Ä¢ –ñ–∞—Ä–æ–ø–æ–Ω–∏–∂–∞—é—â–µ–µ\n‚Ä¢ –°–æ—Ä–±–µ–Ω—Ç—ã\n‚Ä¢ –ì–ª–∞–∑–Ω—ã–µ –∫–∞–ø–ª–∏\n‚Ä¢ –ù–æ–∂–Ω–∏—Ü—ã —Å —Ç—É–ø—ã–º–∏ –∫–æ–Ω—Ü–∞–º–∏\n‚Ä¢ –¢–µ—Ä–º–æ–º–µ—Ç—Ä",
                icon = Icons.Default.Medication
            )
        )
    }

    Scaffold(
        topBar = {
            CustomTopBar(
                navController = navController,
                name = "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                showBackButton = true,
                onBackClick = { navController.popBackStack() }
            )
        },
        bottomBar = { CustomBottomNavigation(navController) }
    ) { padding ->
        LazyColumn(
            modifier = Modifier
                .padding(padding)
                .fillMaxSize()
                .padding(horizontal = 12.dp)
        ) {
            item {
                Text(
                    text = "–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –∑–¥–æ—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–∞",
                    style = MaterialTheme.typography.titleLarge.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    modifier = Modifier
                        .padding(vertical = 20.dp)
                        .fillMaxWidth(),
                    textAlign = TextAlign.Center
                )
            }

            items(faqItems) { item ->
                FaqAccordion(item = item) { clickedItem ->
                    val index = faqItems.indexOfFirst { it.question == clickedItem.question }
                    faqItems[index] = faqItems[index].copy(expanded = !faqItems[index].expanded)
                }
                Spacer(modifier = Modifier.height(6.dp))
            }

            item { Spacer(modifier = Modifier.height(24.dp)) }
        }
    }
}

@Composable
private fun FaqAccordion(item: FAQItem, onItemClick: (FAQItem) -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant,
            contentColor = MaterialTheme.colorScheme.onSurface
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        shape = MaterialTheme.shapes.medium
    ) {
        Column(modifier = Modifier.animateContentSize()) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { onItemClick(item) }
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                item.icon?.let {
                    Icon(
                        imageVector = it,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(28.dp)
                    )
                }

                Text(
                    text = item.question,
                    style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.SemiBold,
                        color = MaterialTheme.colorScheme.onSurface
                    ),
                    modifier = Modifier.weight(1f)
                )

                Icon(
                    imageVector = if (item.expanded) Icons.Default.ExpandLess
                    else Icons.Default.ExpandMore,
                    contentDescription = if (item.expanded) "–°–≤–µ—Ä–Ω—É—Ç—å" else "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å",
                    tint = MaterialTheme.colorScheme.primary.copy(alpha = 0.8f)
                )
            }

            if (item.expanded) {
                Divider(
                    color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.3f),
                    thickness = 1.dp,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
                Text(
                    text = item.answer,
                    style = MaterialTheme.typography.bodyLarge.copy(
                        lineHeight = 24.sp,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.9f)
                    ),
                    modifier = Modifier
                        .padding(16.dp)
                        .fillMaxWidth(),
                    textAlign = TextAlign.Start
                )
            }
        }
    }
}